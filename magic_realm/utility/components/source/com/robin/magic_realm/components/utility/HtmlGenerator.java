package com.robin.magic_realm.components.utility;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.*;
import java.util.ArrayList;

import javax.swing.*;

import com.robin.game.objects.GameData;
import com.robin.game.objects.GameObject;
import com.robin.general.io.ImageFile;
import com.robin.general.util.StringUtilities;
import com.robin.magic_realm.components.RealmComponent;
import com.robin.magic_realm.components.TreasureCardComponent;
import com.robin.magic_realm.components.swing.RealmLogWindow;
import com.robin.magic_realm.components.wrapper.*;

public class HtmlGenerator {
	
	protected GameData data;
	protected GameWrapper game;
	protected RealmCalendar calendar;
	protected HostPrefWrapper hostPrefs;
	
	private boolean highQuality;
	
	protected static final String LOG_PAGE = "LogPage.html";
	private static final String ITEM_PREFIX = "i";
	protected int inventoryIndex = 0;
	
	public HtmlGenerator(GameData data,boolean highQuality) {
		this.data = data;
		this.highQuality = highQuality;
		this.game = GameWrapper.findGame(data);
		this.calendar = RealmCalendar.getCalendar(data);
		this.hostPrefs = HostPrefWrapper.findHostPrefs(data);
	}
	protected void saveComponentImage(String path,JComponent component) {
		Dimension size = component.getPreferredSize();//.getSize();
		BufferedImage bi = new BufferedImage(size.width,size.height,BufferedImage.TYPE_3BYTE_BGR);
		Graphics2D g = (Graphics2D)bi.getGraphics();
		component.paint(g);
		exportImage(path,new ImageIcon(bi),1.0f,null);
	}
	protected boolean exportImage(String path,ImageIcon imageIcon,float quality,Color defaultColor) {
		BufferedImage bi = new BufferedImage(imageIcon.getIconWidth(),imageIcon.getIconHeight(),BufferedImage.TYPE_3BYTE_BGR);
		if (defaultColor!=null) {
			bi.getGraphics().setColor(defaultColor);
			bi.getGraphics().fillRect(0,0,bi.getWidth(),bi.getHeight());
		}
		bi.getGraphics().drawImage(imageIcon.getImage(),0,0,null);
		return ImageFile.saveJpeg(bi,new File(path),highQuality?1.0f:quality);
	}
	protected void writeString(String path,String title,String string,String returnTarget) {
		try {
			PrintStream stream = new PrintStream(path);
			stream.println("<html><head><title>"+title+"</title></head><body>");
			stream.println(string);
			stream.println("<br><br><h4><a href=\""+returnTarget+"\">Return</a></h4>");
			stream.println("<br><br><i>Generated by RealmSpeak Version "+Constants.REALM_SPEAK_VERSION+"</i>");
			stream.println("</body></html>");
			stream.close();
		}
		catch(FileNotFoundException ex) {
			ex.printStackTrace();
		}
	}
	protected String generateLinkElement(String url,String content) {
		StringBuilder sb = new StringBuilder();
		sb.append("<a href=\"");
		sb.append(url);
		sb.append("\">");
		sb.append(content);
		sb.append("</a>\n");
		return sb.toString();
	}
	protected String generateImageElement(int border,String alternate,String path) {
		StringBuilder sb = new StringBuilder();
		sb.append("<img alt=\"");
		sb.append(alternate);
		sb.append("\" src=\"");
		sb.append(path);
		sb.append("\" border=);");
		sb.append(border);
		sb.append(" >");
		return sb.toString();
	}
	protected void populateInventory(String path,StringBuilder sb,CharacterWrapper character,boolean active) {
		ArrayList<GameObject> inventory = active?character.getActiveInventory():character.getInactiveInventory();
		for (GameObject inv:inventory) {
			RealmComponent rc = RealmComponent.getRealmComponent(inv);
			String name = inv.getName();
			ImageIcon icon = rc.getIcon();
			if (!active && rc.isTreasure()) {
				TreasureCardComponent treasure = (TreasureCardComponent)rc;
				icon = treasure.getFlipSideIcon();
				name = "Treasure";
			}
			exportImage(path+File.separator+ITEM_PREFIX+inventoryIndex+".jpg",icon,1.0f,Color.white);
			sb.append("<img alt=\""+name+"\" src=\""+ITEM_PREFIX+inventoryIndex+".jpg\" >\n");
			inventoryIndex++;
		}
	}
	protected void saveLog(String detailLog,String path,String fileName,String title,String returnTarget) {
		StringBuilder sb = new StringBuilder();
		sb.append(detailLog);
		String string = sb.toString();
		string = StringUtilities.findAndReplace(string,RealmLogWindow.INDENT_BLOCK,"&nbsp;&nbsp;&nbsp;&nbsp;");
		writeString(path+File.separator+fileName,title,string,returnTarget);
	}
}